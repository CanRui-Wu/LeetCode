128. Longest Consecutive Sequence
我的思路:并查集，对每个数O(n) 检查其值的后一位数是否在数组中(hash_map则o(1),map为o(logn))，(前一位数不用，会被后面的检测到).如果在，检查其是否已经在一个集合(O(1))，如果不在那么将这两个合并成一个集合(O(1))，用一个size数组维护每个根节点的集合大小。
注意题目中可能有负数和重复数的情况
重复的数会导致map记录有问题，map对这些重复值相当于只记录了一个索引，但是本题目中重复的数可以忽略，所以不影响我们解决这题。
提交了map的结果,O(nlogn)时间居然过了-_-。
如果用O(nlogn)时间，那么排序更加简单。

其他思路:
事实上，如果用了hash，如果检查一个元素是否存在可以用O(1)时间，那么直接从头到尾遍历。
对每一个元素，如果它前面一个值不在，那么不断查看其后面的值直到查找不到，然后更新最长连续序列。
遍历是O(n)，而内层的不断查找虽然最坏是O(n)，但是在所有循环里面加起来最多也就执行n次，因此内层循环平均是O(1)的。
因此，总体的复杂度为O(n)。

200. Number of Islands
DFS用栈写起来思路，很简单，DFS要遍历上下左右，因为只往右下可能走不到某个位置。
用并查集，那么只需要右下，因为右下就能覆盖每一条边，因此能够保证有关系的一定能够成功添加。写矩阵的时候出现了失误，导致多次RE，下次写代码必须细心再细心。

